name: "segnet"
layer {
  name: 'data'
  type: 'Python'
  top: 'im_data'
  top: 'txt_data'
  top: 'boxes'
  top: 'labels'
  include {
    phase: TRAIN
  }
  python_param {
    module: 'web_data_layer'
    layer: 'WebDataLayer'
    param_str: "{'phase':'TRAIN','batch_size': 2, 'data': '','im_scale':1,'txt_scale':0.125}"
  }
}
layer {
  name: 'data'
  type: 'Python'
  top: 'im_data'
  top: 'txt_data'
  top: 'boxes'
  top: 'labels'
  include {
    phase: TEST
  }
  python_param {
    module: 'web_data_layer'
    layer: 'WebDataLayer'
    param_str: "{'phase':'TEST','batch_size': 1, 'data': '/storage/plzen1/home/gogartom/TextMaps/data_shops/test.txt','im_scale':1,'txt_scale':0.125}"
  }
}
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "im_data"
  top: "conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    pad: 5
    stride: 4
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    pad: 0
    stride: 2
  }
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    kernel_size: 5
    pad: 2
    group: 2
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "conv2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "concat"
  bottom: "norm2"
  bottom: "txt_data"
  top: "both"
  type: "Concat"
  concat_param {
    axis: 1
  }
}
layer {
  name: "both_conv1"
  type: "Convolution"
  bottom: "both"
  top: "both_conv1"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    kernel_size: 7
    stride: 1
    pad: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "both_relu1"
  type: "ReLU"
  bottom: "both_conv1"
  top: "both_conv1"
}
layer {
  name: "both_pool1"
  type: "Pooling"
  bottom: "both_conv1"
  top: "both_pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "both_norm1"
  type: "LRN"
  bottom: "both_pool1"
  top: "both_norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "both_conv2"
  type: "Convolution"
  bottom: "both_norm1"
  top: "both_conv2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "both_relu2"
  type: "ReLU"
  bottom: "both_conv2"
  top: "both_conv2"
}
layer {
  name: "both_pool2"
  type: "Pooling"
  bottom: "both_conv2"
  top: "both_pool2"
  top: "both_pool2_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "both_norm2"
  type: "LRN"
  bottom: "both_pool2"
  top: "both_norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "both_conv3"
  type: "Convolution"
  bottom: "both_norm2"
  top: "both_conv3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 48
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "both_relu3"
  type: "ReLU"
  bottom: "both_conv3"
  top: "both_conv3"
}
layer {
  name: "both_pool3"
  type: "Pooling"
  bottom: "both_conv3"
  top: "both_pool3"
  top: "both_pool3_mask"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "both_norm3"
  type: "LRN"
  bottom: "both_pool3"
  top: "both_norm3"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "upsample3"
  type: "Upsample"
  bottom: "both_norm3"
  bottom: "both_pool3_mask"
  top: "upsample3"
  upsample_param {
    scale: 2
    upsample_h:40
    upsample_w:40
  }
}
layer {
  name: "conv_decode3"
  type: "Convolution"
  bottom: "upsample3"
  top: "conv_decode3"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "upsample2"
  type: "Upsample"
  bottom: "conv_decode3"
  bottom: "both_pool2_mask"
  top: "upsample2"
  upsample_param {
    scale: 2
    upsample_h:80
    upsample_w:80
  }
}
layer {
  name: "conv_decode2"
  type: "Convolution"
  bottom: "upsample2"
  top: "conv_decode2"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 7
    pad: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "roi_pool"
  type: "ROIPooling"
  bottom: "conv_decode2"
  bottom: "boxes"
  top: "roi_pool"
  roi_pooling_param {
    pooled_w: 7
    pooled_h: 7
    spatial_scale: 0.0625 # 1/16
  }
}
layer {
  name: "conv_classifier"
  type: "Convolution"
  bottom: "roi_pool"
  top: "conv_classifier"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 4
    kernel_size: 7
    weight_filler {
      type: "msra"
    }
    bias_filler {
      type: "constant"
    }
  }
}
layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "conv_classifier"
  bottom: "labels"
  top: "loss"
  softmax_param {engine: CAFFE}
  loss_param: {
    weight_by_label_freqs: true
    ignore_label: 4
    class_weighting: 0.1
    class_weighting: 10
    class_weighting: 10
    class_weighting: 10
  }
}
layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "conv_classifier"
  bottom: "labels"
  top: "accuracy"
  top: "per_class_accuracy"
}

layer {
  name: "prob"
  type: "Softmax"
  bottom: "conv_classifier"
  top: "prob"
  softmax_param {engine: CAFFE}
  include {
    phase: TEST
  }
}
layer {
  type: 'Python'
  bottom: 'prob'
  top: 'web_price_accuracy'
  top: 'web_image_accuracy'
  top: 'web_name_accuracy'
  include {
    phase: TEST
  }
  python_param {
    module: 'web_accuracy_layer'
    layer: 'WebAccuracyLayer'
  }
}

